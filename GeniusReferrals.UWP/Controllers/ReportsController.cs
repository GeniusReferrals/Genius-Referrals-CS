/*
 * GeniusReferrals.UWP
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 02/17/2017
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using GeniusReferrals.UWP;
using GeniusReferrals.UWP.Utilities;
using GeniusReferrals.UWP.Http.Request;
using GeniusReferrals.UWP.Http.Response;
using GeniusReferrals.UWP.Http.Client;
using GeniusReferrals.UWP.Exceptions;
using GeniusReferrals.UWP.Models;

namespace GeniusReferrals.UWP.Controllers
{
    public partial class ReportsController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static ReportsController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static ReportsController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new ReportsController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// Get referrals summary per referral origin.
        /// </summary>
        /// <param name="advocateToken">Required parameter: The advocate's token</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic GetReferralsSummaryPerOrigin(string advocateToken)
        {
            Task<dynamic> t = GetReferralsSummaryPerOriginAsync(advocateToken);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Get referrals summary per referral origin.
        /// </summary>
        /// <param name="advocateToken">Required parameter: The advocate's token</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetReferralsSummaryPerOriginAsync(string advocateToken)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/reports/referrals-summary-per-origin");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "advocate_token", advocateToken }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("Content-Type", Configuration.ContentType);
            _headers.Add("X-Auth-Token", Configuration.XAuthToken);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Get bonuses summary per referral origin.
        /// </summary>
        /// <param name="advocateToken">Required parameter: The advocate's token</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic GetBonusesSummaryPerOrigin(string advocateToken)
        {
            Task<dynamic> t = GetBonusesSummaryPerOriginAsync(advocateToken);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Get bonuses summary per referral origin.
        /// </summary>
        /// <param name="advocateToken">Required parameter: The advocate's token</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetBonusesSummaryPerOriginAsync(string advocateToken)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/reports/bonuses-summary-per-origin");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "advocate_token", advocateToken }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("Content-Type", Configuration.ContentType);
            _headers.Add("X-Auth-Token", Configuration.XAuthToken);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Get top 10 advocates.
        /// </summary>
        /// <param name="accountSlug">Optional parameter: The account identifier</param>
        /// <param name="campaignSlug">Optional parameter: The campaign identifier</param>
        /// <param name="limit">Optional parameter: Maximum number of results to return in the response. Default (10)</param>
        /// <param name="mfrom">Optional parameter: The datetime were the range of the search starts</param>
        /// <param name="to">Optional parameter: The datetime were the range of the search stops</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic GetTopAdvocates(
                string accountSlug = null,
                string campaignSlug = null,
                int? limit = null,
                DateTime? mfrom = null,
                DateTime? to = null)
        {
            Task<dynamic> t = GetTopAdvocatesAsync(accountSlug, campaignSlug, limit, mfrom, to);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Get top 10 advocates.
        /// </summary>
        /// <param name="accountSlug">Optional parameter: The account identifier</param>
        /// <param name="campaignSlug">Optional parameter: The campaign identifier</param>
        /// <param name="limit">Optional parameter: Maximum number of results to return in the response. Default (10)</param>
        /// <param name="mfrom">Optional parameter: The datetime were the range of the search starts</param>
        /// <param name="to">Optional parameter: The datetime were the range of the search stops</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetTopAdvocatesAsync(
                string accountSlug = null,
                string campaignSlug = null,
                int? limit = null,
                DateTime? mfrom = null,
                DateTime? to = null)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/reports/top-advocates");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "account_slug", accountSlug },
                { "campaign_slug", campaignSlug },
                { "limit", limit },
                { "from", (mfrom.HasValue) ? mfrom.Value.ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK") : null },
                { "to", (to.HasValue) ? to.Value.ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK") : null }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("Content-Type", Configuration.ContentType);
            _headers.Add("X-Auth-Token", Configuration.XAuthToken);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Get share daily participation.
        /// </summary>
        /// <param name="accountSlug">Optional parameter: The account identifier</param>
        /// <param name="campaignSlug">Optional parameter: The campaign identifier</param>
        /// <param name="advocateToken">Optional parameter: The advocate's token</param>
        /// <param name="mfrom">Optional parameter: The datetime were the range of the search starts</param>
        /// <param name="to">Optional parameter: The datetime were the range of the search stops</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic GetShareDailyParticipation(
                string accountSlug = null,
                string campaignSlug = null,
                string advocateToken = null,
                DateTime? mfrom = null,
                DateTime? to = null)
        {
            Task<dynamic> t = GetShareDailyParticipationAsync(accountSlug, campaignSlug, advocateToken, mfrom, to);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Get share daily participation.
        /// </summary>
        /// <param name="accountSlug">Optional parameter: The account identifier</param>
        /// <param name="campaignSlug">Optional parameter: The campaign identifier</param>
        /// <param name="advocateToken">Optional parameter: The advocate's token</param>
        /// <param name="mfrom">Optional parameter: The datetime were the range of the search starts</param>
        /// <param name="to">Optional parameter: The datetime were the range of the search stops</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetShareDailyParticipationAsync(
                string accountSlug = null,
                string campaignSlug = null,
                string advocateToken = null,
                DateTime? mfrom = null,
                DateTime? to = null)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/reports/share-daily-participation");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "account_slug", accountSlug },
                { "campaign_slug", campaignSlug },
                { "advocate_token", advocateToken },
                { "from", (mfrom.HasValue) ? mfrom.Value.ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK") : null },
                { "to", (to.HasValue) ? to.Value.ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK") : null }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("Content-Type", Configuration.ContentType);
            _headers.Add("X-Auth-Token", Configuration.XAuthToken);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Get referral daily participation.
        /// </summary>
        /// <param name="accountSlug">Optional parameter: The account identifier</param>
        /// <param name="campaignSlug">Optional parameter: The campaign identifier</param>
        /// <param name="advocateToken">Optional parameter: The advocate's token</param>
        /// <param name="mfrom">Optional parameter: The datetime were the range of the search starts</param>
        /// <param name="to">Optional parameter: The datetime were the range of the search stops</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic GetReferralDailyParticipation(
                string accountSlug = null,
                string campaignSlug = null,
                string advocateToken = null,
                DateTime? mfrom = null,
                DateTime? to = null)
        {
            Task<dynamic> t = GetReferralDailyParticipationAsync(accountSlug, campaignSlug, advocateToken, mfrom, to);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Get referral daily participation.
        /// </summary>
        /// <param name="accountSlug">Optional parameter: The account identifier</param>
        /// <param name="campaignSlug">Optional parameter: The campaign identifier</param>
        /// <param name="advocateToken">Optional parameter: The advocate's token</param>
        /// <param name="mfrom">Optional parameter: The datetime were the range of the search starts</param>
        /// <param name="to">Optional parameter: The datetime were the range of the search stops</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetReferralDailyParticipationAsync(
                string accountSlug = null,
                string campaignSlug = null,
                string advocateToken = null,
                DateTime? mfrom = null,
                DateTime? to = null)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/reports/referral-daily-participation");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "account_slug", accountSlug },
                { "campaign_slug", campaignSlug },
                { "advocate_token", advocateToken },
                { "from", (mfrom.HasValue) ? mfrom.Value.ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK") : null },
                { "to", (to.HasValue) ? to.Value.ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK") : null }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("Content-Type", Configuration.ContentType);
            _headers.Add("X-Auth-Token", Configuration.XAuthToken);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Get click daily participation.
        /// </summary>
        /// <param name="accountSlug">Optional parameter: The account identifier</param>
        /// <param name="campaignSlug">Optional parameter: The campaign identifier</param>
        /// <param name="advocateToken">Optional parameter: The advocate's token</param>
        /// <param name="mfrom">Optional parameter: The datetime were the range of the search starts</param>
        /// <param name="to">Optional parameter: The datetime were the range of the search stops</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic GetClickDailyParticipation(
                string accountSlug = null,
                string campaignSlug = null,
                string advocateToken = null,
                DateTime? mfrom = null,
                DateTime? to = null)
        {
            Task<dynamic> t = GetClickDailyParticipationAsync(accountSlug, campaignSlug, advocateToken, mfrom, to);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Get click daily participation.
        /// </summary>
        /// <param name="accountSlug">Optional parameter: The account identifier</param>
        /// <param name="campaignSlug">Optional parameter: The campaign identifier</param>
        /// <param name="advocateToken">Optional parameter: The advocate's token</param>
        /// <param name="mfrom">Optional parameter: The datetime were the range of the search starts</param>
        /// <param name="to">Optional parameter: The datetime were the range of the search stops</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetClickDailyParticipationAsync(
                string accountSlug = null,
                string campaignSlug = null,
                string advocateToken = null,
                DateTime? mfrom = null,
                DateTime? to = null)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/reports/click-daily-participation");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "account_slug", accountSlug },
                { "campaign_slug", campaignSlug },
                { "advocate_token", advocateToken },
                { "from", (mfrom.HasValue) ? mfrom.Value.ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK") : null },
                { "to", (to.HasValue) ? to.Value.ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK") : null }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("Content-Type", Configuration.ContentType);
            _headers.Add("X-Auth-Token", Configuration.XAuthToken);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Get bonuses daily given.
        /// </summary>
        /// <param name="accountSlug">Optional parameter: The account identifier</param>
        /// <param name="campaignSlug">Optional parameter: The campaign identifier</param>
        /// <param name="advocateToken">Optional parameter: The advocate identifier</param>
        /// <param name="mfrom">Optional parameter: The datetime were the range of the search starts</param>
        /// <param name="to">Optional parameter: The datetime were the range of the search stops</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic GetBonusesDailyGiven(
                string accountSlug = null,
                string campaignSlug = null,
                string advocateToken = null,
                DateTime? mfrom = null,
                DateTime? to = null)
        {
            Task<dynamic> t = GetBonusesDailyGivenAsync(accountSlug, campaignSlug, advocateToken, mfrom, to);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Get bonuses daily given.
        /// </summary>
        /// <param name="accountSlug">Optional parameter: The account identifier</param>
        /// <param name="campaignSlug">Optional parameter: The campaign identifier</param>
        /// <param name="advocateToken">Optional parameter: The advocate identifier</param>
        /// <param name="mfrom">Optional parameter: The datetime were the range of the search starts</param>
        /// <param name="to">Optional parameter: The datetime were the range of the search stops</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetBonusesDailyGivenAsync(
                string accountSlug = null,
                string campaignSlug = null,
                string advocateToken = null,
                DateTime? mfrom = null,
                DateTime? to = null)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/reports/bonuses-daily-given");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "account_slug", accountSlug },
                { "campaign_slug", campaignSlug },
                { "advocate_token", advocateToken },
                { "from", (mfrom.HasValue) ? mfrom.Value.ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK") : null },
                { "to", (to.HasValue) ? to.Value.ToString("r") : null }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("Content-Type", Configuration.ContentType);
            _headers.Add("X-Auth-Token", Configuration.XAuthToken);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 