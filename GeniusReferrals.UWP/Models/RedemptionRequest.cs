/*
 * GeniusReferrals.UWP
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 02/17/2017
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using GeniusReferrals.UWP;
using GeniusReferrals.UWP.Utilities;

namespace GeniusReferrals.UWP.Models
{
    public class RedemptionRequest : INotifyPropertyChanged 
    {
        // These fields hold the values for the public properties.
        private string advocateToken;
        private string requestStatusSlug;
        private string requestActionSlug;
        private string currencyCode;
        private int amount;
        private string description;
        private string advocatesPaypalUsername;

        /// <summary>
        /// The advocate's token
        /// </summary>
        [JsonProperty("advocate_token")]
        public string AdvocateToken 
        { 
            get 
            {
                return this.advocateToken; 
            } 
            set 
            {
                this.advocateToken = value;
                onPropertyChanged("AdvocateToken");
            }
        }

        /// <summary>
        /// The request status identifier
        /// </summary>
        [JsonProperty("request_status_slug")]
        public string RequestStatusSlug 
        { 
            get 
            {
                return this.requestStatusSlug; 
            } 
            set 
            {
                this.requestStatusSlug = value;
                onPropertyChanged("RequestStatusSlug");
            }
        }

        /// <summary>
        /// The request action identifier
        /// </summary>
        [JsonProperty("request_action_slug")]
        public string RequestActionSlug 
        { 
            get 
            {
                return this.requestActionSlug; 
            } 
            set 
            {
                this.requestActionSlug = value;
                onPropertyChanged("RequestActionSlug");
            }
        }

        /// <summary>
        /// The currency code
        /// </summary>
        [JsonProperty("currency_code")]
        public string CurrencyCode 
        { 
            get 
            {
                return this.currencyCode; 
            } 
            set 
            {
                this.currencyCode = value;
                onPropertyChanged("CurrencyCode");
            }
        }

        /// <summary>
        /// The amount to be redeemed
        /// </summary>
        [JsonProperty("amount")]
        public int Amount 
        { 
            get 
            {
                return this.amount; 
            } 
            set 
            {
                this.amount = value;
                onPropertyChanged("Amount");
            }
        }

        /// <summary>
        /// The description of the requests, useful to store extra information about the request.
        /// </summary>
        [JsonProperty("description")]
        public string Description 
        { 
            get 
            {
                return this.description; 
            } 
            set 
            {
                this.description = value;
                onPropertyChanged("Description");
            }
        }

        /// <summary>
        /// The advocate's PayPal username
        /// </summary>
        [JsonProperty("advocates_paypal_username")]
        public string AdvocatesPaypalUsername 
        { 
            get 
            {
                return this.advocatesPaypalUsername; 
            } 
            set 
            {
                this.advocatesPaypalUsername = value;
                onPropertyChanged("AdvocatesPaypalUsername");
            }
        }

        /// <summary>
        /// Property changed event for observer pattern
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Raises event when a property is changed
        /// </summary>
        /// <param name="propertyName">Name of the changed property</param>
        protected void onPropertyChanged(String propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
} 